//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Debugger.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace OldBit.Debugger.Parser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DebuggerParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, INT=3, HEX=4, BIN=5, WS=6, COMMA=7, REG=8, PRINT=9, POKE=10, 
		PEEK=11;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_assign = 2, RULE_printstmt = 3, 
		RULE_pokestmt = 4, RULE_peekfunc = 5, RULE_expression = 6;
	public static readonly string[] ruleNames = {
		"program", "statement", "assign", "printstmt", "pokestmt", "peekfunc", 
		"expression"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", null, null, null, null, "','", null, null, "'POKE'", 
		"'PEEK'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "INT", "HEX", "BIN", "WS", "COMMA", "REG", "PRINT", 
		"POKE", "PEEK"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Debugger.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DebuggerParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DebuggerParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DebuggerParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDebuggerListener typedListener = listener as IDebuggerListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDebuggerListener typedListener = listener as IDebuggerListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDebuggerVisitor<TResult> typedVisitor = visitor as IDebuggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 14;
			statement();
			State = 19;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 15;
					Match(T__0);
					State = 16;
					statement();
					}
					} 
				}
				State = 21;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 22;
				Match(T__0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrintstmtContext printstmt() {
			return GetRuleContext<PrintstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PokestmtContext pokestmt() {
			return GetRuleContext<PokestmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PeekfuncContext peekfunc() {
			return GetRuleContext<PeekfuncContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDebuggerListener typedListener = listener as IDebuggerListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDebuggerListener typedListener = listener as IDebuggerListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDebuggerVisitor<TResult> typedVisitor = visitor as IDebuggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			State = 30;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 25;
				expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 26;
				printstmt();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 27;
				pokestmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 28;
				peekfunc();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 29;
				assign();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REG() { return GetToken(DebuggerParser.REG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDebuggerListener typedListener = listener as IDebuggerListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDebuggerListener typedListener = listener as IDebuggerListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDebuggerVisitor<TResult> typedVisitor = visitor as IDebuggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssign(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 4, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			Match(REG);
			State = 33;
			Match(T__1);
			State = 34;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrintstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRINT() { return GetToken(DebuggerParser.PRINT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA() { return GetTokens(DebuggerParser.COMMA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA(int i) {
			return GetToken(DebuggerParser.COMMA, i);
		}
		public PrintstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_printstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDebuggerListener typedListener = listener as IDebuggerListener;
			if (typedListener != null) typedListener.EnterPrintstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDebuggerListener typedListener = listener as IDebuggerListener;
			if (typedListener != null) typedListener.ExitPrintstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDebuggerVisitor<TResult> typedVisitor = visitor as IDebuggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrintstmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrintstmtContext printstmt() {
		PrintstmtContext _localctx = new PrintstmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_printstmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			Match(PRINT);
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 312L) != 0)) {
				{
				State = 37;
				expression();
				State = 42;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 38;
					Match(COMMA);
					State = 39;
					expression();
					}
					}
					State = 44;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PokestmtContext : ParserRuleContext {
		public ExpressionContext address;
		public ExpressionContext value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POKE() { return GetToken(DebuggerParser.POKE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA() { return GetToken(DebuggerParser.COMMA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PokestmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pokestmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDebuggerListener typedListener = listener as IDebuggerListener;
			if (typedListener != null) typedListener.EnterPokestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDebuggerListener typedListener = listener as IDebuggerListener;
			if (typedListener != null) typedListener.ExitPokestmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDebuggerVisitor<TResult> typedVisitor = visitor as IDebuggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPokestmt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PokestmtContext pokestmt() {
		PokestmtContext _localctx = new PokestmtContext(Context, State);
		EnterRule(_localctx, 8, RULE_pokestmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			Match(POKE);
			State = 48;
			_localctx.address = expression();
			State = 49;
			Match(COMMA);
			State = 50;
			_localctx.value = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PeekfuncContext : ParserRuleContext {
		public ExpressionContext address;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PEEK() { return GetToken(DebuggerParser.PEEK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PeekfuncContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_peekfunc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDebuggerListener typedListener = listener as IDebuggerListener;
			if (typedListener != null) typedListener.EnterPeekfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDebuggerListener typedListener = listener as IDebuggerListener;
			if (typedListener != null) typedListener.ExitPeekfunc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDebuggerVisitor<TResult> typedVisitor = visitor as IDebuggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPeekfunc(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PeekfuncContext peekfunc() {
		PeekfuncContext _localctx = new PeekfuncContext(Context, State);
		EnterRule(_localctx, 10, RULE_peekfunc);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			Match(PEEK);
			State = 53;
			_localctx.address = expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RegContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REG() { return GetToken(DebuggerParser.REG, 0); }
		public RegContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDebuggerListener typedListener = listener as IDebuggerListener;
			if (typedListener != null) typedListener.EnterReg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDebuggerListener typedListener = listener as IDebuggerListener;
			if (typedListener != null) typedListener.ExitReg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDebuggerVisitor<TResult> typedVisitor = visitor as IDebuggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BinContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN() { return GetToken(DebuggerParser.BIN, 0); }
		public BinContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDebuggerListener typedListener = listener as IDebuggerListener;
			if (typedListener != null) typedListener.EnterBin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDebuggerListener typedListener = listener as IDebuggerListener;
			if (typedListener != null) typedListener.ExitBin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDebuggerVisitor<TResult> typedVisitor = visitor as IDebuggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBin(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class HexContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX() { return GetToken(DebuggerParser.HEX, 0); }
		public HexContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDebuggerListener typedListener = listener as IDebuggerListener;
			if (typedListener != null) typedListener.EnterHex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDebuggerListener typedListener = listener as IDebuggerListener;
			if (typedListener != null) typedListener.ExitHex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDebuggerVisitor<TResult> typedVisitor = visitor as IDebuggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(DebuggerParser.INT, 0); }
		public IntContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDebuggerListener typedListener = listener as IDebuggerListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDebuggerListener typedListener = listener as IDebuggerListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDebuggerVisitor<TResult> typedVisitor = visitor as IDebuggerVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_expression);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT:
				_localctx = new IntContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 55;
				Match(INT);
				}
				break;
			case HEX:
				_localctx = new HexContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 56;
				Match(HEX);
				}
				break;
			case BIN:
				_localctx = new BinContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 57;
				Match(BIN);
				}
				break;
			case REG:
				_localctx = new RegContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 58;
				Match(REG);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,11,62,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,1,0,
		1,0,1,0,5,0,18,8,0,10,0,12,0,21,9,0,1,0,3,0,24,8,0,1,1,1,1,1,1,1,1,1,1,
		3,1,31,8,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,5,3,41,8,3,10,3,12,3,44,9,3,
		3,3,46,8,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,3,6,60,8,6,
		1,6,0,0,7,0,2,4,6,8,10,12,0,0,65,0,14,1,0,0,0,2,30,1,0,0,0,4,32,1,0,0,
		0,6,36,1,0,0,0,8,47,1,0,0,0,10,52,1,0,0,0,12,59,1,0,0,0,14,19,3,2,1,0,
		15,16,5,1,0,0,16,18,3,2,1,0,17,15,1,0,0,0,18,21,1,0,0,0,19,17,1,0,0,0,
		19,20,1,0,0,0,20,23,1,0,0,0,21,19,1,0,0,0,22,24,5,1,0,0,23,22,1,0,0,0,
		23,24,1,0,0,0,24,1,1,0,0,0,25,31,3,12,6,0,26,31,3,6,3,0,27,31,3,8,4,0,
		28,31,3,10,5,0,29,31,3,4,2,0,30,25,1,0,0,0,30,26,1,0,0,0,30,27,1,0,0,0,
		30,28,1,0,0,0,30,29,1,0,0,0,31,3,1,0,0,0,32,33,5,8,0,0,33,34,5,2,0,0,34,
		35,3,12,6,0,35,5,1,0,0,0,36,45,5,9,0,0,37,42,3,12,6,0,38,39,5,7,0,0,39,
		41,3,12,6,0,40,38,1,0,0,0,41,44,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,0,43,
		46,1,0,0,0,44,42,1,0,0,0,45,37,1,0,0,0,45,46,1,0,0,0,46,7,1,0,0,0,47,48,
		5,10,0,0,48,49,3,12,6,0,49,50,5,7,0,0,50,51,3,12,6,0,51,9,1,0,0,0,52,53,
		5,11,0,0,53,54,3,12,6,0,54,11,1,0,0,0,55,60,5,3,0,0,56,60,5,4,0,0,57,60,
		5,5,0,0,58,60,5,8,0,0,59,55,1,0,0,0,59,56,1,0,0,0,59,57,1,0,0,0,59,58,
		1,0,0,0,60,13,1,0,0,0,6,19,23,30,42,45,59
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace OldBit.Debugger.Parser
