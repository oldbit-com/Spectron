//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Debugger.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace OldBit.Debugger.Parser {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class DebuggerLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, INT=3, HEX=4, BIN=5, WS=6, COMMA=7, REG=8, PRINT=9, POKE=10, 
		PEEK=11;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "INT", "HEX", "BIN", "WS", "COMMA", "REG", "PRINT", "POKE", 
		"PEEK"
	};


	public DebuggerLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public DebuggerLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "';'", "'='", null, null, null, null, "','", null, null, "'POKE'", 
		"'PEEK'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, "INT", "HEX", "BIN", "WS", "COMMA", "REG", "PRINT", 
		"POKE", "PEEK"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Debugger.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DebuggerLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,11,151,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,1,1,1,1,2,4,2,29,8,2,11,
		2,12,2,30,1,3,1,3,1,3,3,3,36,8,3,1,3,4,3,39,8,3,11,3,12,3,40,1,3,4,3,44,
		8,3,11,3,12,3,45,1,3,3,3,49,8,3,1,4,1,4,1,4,1,4,4,4,55,8,4,11,4,12,4,56,
		1,4,4,4,60,8,4,11,4,12,4,61,1,4,3,4,65,8,4,1,5,4,5,68,8,5,11,5,12,5,69,
		1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,132,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,
		140,8,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,0,0,11,1,1,3,2,5,
		3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,1,0,24,1,0,48,57,2,0,88,88,120,
		120,3,0,48,57,65,70,97,102,2,0,72,72,104,104,2,0,66,66,98,98,1,0,48,49,
		3,0,9,10,13,13,32,32,6,0,65,69,72,72,76,76,97,101,104,104,108,108,2,0,
		65,65,97,97,2,0,67,67,99,99,2,0,68,68,100,100,2,0,69,69,101,101,2,0,76,
		76,108,108,2,0,73,73,105,105,2,0,89,89,121,121,2,0,70,70,102,102,2,0,83,
		83,115,115,2,0,80,80,112,112,4,0,73,73,82,82,105,105,114,114,2,0,82,82,
		114,114,2,0,78,78,110,110,2,0,84,84,116,116,2,0,79,79,111,111,2,0,75,75,
		107,107,184,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
		0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,1,23,1,0,0,0,3,25,1,0,0,0,5,28,1,0,0,0,7,48,1,0,0,0,9,64,1,0,0,
		0,11,67,1,0,0,0,13,73,1,0,0,0,15,131,1,0,0,0,17,139,1,0,0,0,19,141,1,0,
		0,0,21,146,1,0,0,0,23,24,5,59,0,0,24,2,1,0,0,0,25,26,5,61,0,0,26,4,1,0,
		0,0,27,29,7,0,0,0,28,27,1,0,0,0,29,30,1,0,0,0,30,28,1,0,0,0,30,31,1,0,
		0,0,31,6,1,0,0,0,32,33,5,48,0,0,33,36,7,1,0,0,34,36,5,36,0,0,35,32,1,0,
		0,0,35,34,1,0,0,0,36,38,1,0,0,0,37,39,7,2,0,0,38,37,1,0,0,0,39,40,1,0,
		0,0,40,38,1,0,0,0,40,41,1,0,0,0,41,49,1,0,0,0,42,44,7,2,0,0,43,42,1,0,
		0,0,44,45,1,0,0,0,45,43,1,0,0,0,45,46,1,0,0,0,46,47,1,0,0,0,47,49,7,3,
		0,0,48,35,1,0,0,0,48,43,1,0,0,0,49,8,1,0,0,0,50,51,5,48,0,0,51,52,7,4,
		0,0,52,54,1,0,0,0,53,55,7,5,0,0,54,53,1,0,0,0,55,56,1,0,0,0,56,54,1,0,
		0,0,56,57,1,0,0,0,57,65,1,0,0,0,58,60,7,5,0,0,59,58,1,0,0,0,60,61,1,0,
		0,0,61,59,1,0,0,0,61,62,1,0,0,0,62,63,1,0,0,0,63,65,7,4,0,0,64,50,1,0,
		0,0,64,59,1,0,0,0,65,10,1,0,0,0,66,68,7,6,0,0,67,66,1,0,0,0,68,69,1,0,
		0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,71,1,0,0,0,71,72,6,5,0,0,72,12,1,0,
		0,0,73,74,5,44,0,0,74,14,1,0,0,0,75,132,7,7,0,0,76,77,7,8,0,0,77,132,5,
		39,0,0,78,79,7,4,0,0,79,132,5,39,0,0,80,81,7,9,0,0,81,132,5,39,0,0,82,
		83,7,10,0,0,83,132,5,39,0,0,84,85,7,11,0,0,85,132,5,39,0,0,86,87,7,3,0,
		0,87,132,5,39,0,0,88,89,7,12,0,0,89,132,5,39,0,0,90,91,7,13,0,0,91,92,
		7,1,0,0,92,132,7,3,0,0,93,94,7,13,0,0,94,95,7,1,0,0,95,132,7,12,0,0,96,
		97,7,13,0,0,97,98,7,14,0,0,98,132,7,3,0,0,99,100,7,13,0,0,100,101,7,14,
		0,0,101,132,7,12,0,0,102,103,7,8,0,0,103,132,7,15,0,0,104,105,7,4,0,0,
		105,132,7,9,0,0,106,107,7,10,0,0,107,132,7,11,0,0,108,109,7,3,0,0,109,
		132,7,12,0,0,110,111,7,8,0,0,111,112,7,15,0,0,112,132,5,39,0,0,113,114,
		7,4,0,0,114,115,7,9,0,0,115,132,5,39,0,0,116,117,7,10,0,0,117,118,7,11,
		0,0,118,132,5,39,0,0,119,120,7,3,0,0,120,121,7,12,0,0,121,132,5,39,0,0,
		122,123,7,16,0,0,123,132,7,17,0,0,124,125,7,17,0,0,125,132,7,9,0,0,126,
		127,7,13,0,0,127,132,7,1,0,0,128,129,7,13,0,0,129,132,7,14,0,0,130,132,
		7,18,0,0,131,75,1,0,0,0,131,76,1,0,0,0,131,78,1,0,0,0,131,80,1,0,0,0,131,
		82,1,0,0,0,131,84,1,0,0,0,131,86,1,0,0,0,131,88,1,0,0,0,131,90,1,0,0,0,
		131,93,1,0,0,0,131,96,1,0,0,0,131,99,1,0,0,0,131,102,1,0,0,0,131,104,1,
		0,0,0,131,106,1,0,0,0,131,108,1,0,0,0,131,110,1,0,0,0,131,113,1,0,0,0,
		131,116,1,0,0,0,131,119,1,0,0,0,131,122,1,0,0,0,131,124,1,0,0,0,131,126,
		1,0,0,0,131,128,1,0,0,0,131,130,1,0,0,0,132,16,1,0,0,0,133,134,7,17,0,
		0,134,135,7,19,0,0,135,136,7,13,0,0,136,137,7,20,0,0,137,140,7,21,0,0,
		138,140,5,63,0,0,139,133,1,0,0,0,139,138,1,0,0,0,140,18,1,0,0,0,141,142,
		7,17,0,0,142,143,7,22,0,0,143,144,7,23,0,0,144,145,7,11,0,0,145,20,1,0,
		0,0,146,147,7,17,0,0,147,148,7,11,0,0,148,149,7,11,0,0,149,150,7,23,0,
		0,150,22,1,0,0,0,12,0,30,35,40,45,48,56,61,64,69,131,139,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace OldBit.Debugger.Parser
