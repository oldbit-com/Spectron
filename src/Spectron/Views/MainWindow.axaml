<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:i="clr-namespace:Avalonia.Xaml.Interactivity;assembly=Avalonia.Xaml.Interactivity"
        xmlns:viewModels="clr-namespace:OldBit.Spectron.ViewModels"
        xmlns:converters="clr-namespace:OldBit.Spectron.Converters"
        xmlns:controls="clr-namespace:OldBit.Spectron.Controls"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="OldBit.Spectron.Views.MainWindow"
        x:DataType="viewModels:MainWindowViewModel"
        Icon="/Assets/spectron.ico"
        Title="{Binding Title}"
        Width="1024" Height="768"
        WindowStartupLocation="CenterScreen"
        WindowState="{Binding WindowState}"
        Name="Window">

    <i:Interaction.Behaviors>
        <EventTriggerBehavior EventName="Opened" SourceObject="Window">
            <InvokeCommandAction Command="{Binding WindowOpenedCommand}" />
        </EventTriggerBehavior>
        <EventTriggerBehavior EventName="Closing" SourceObject="Window">
            <InvokeCommandAction Command="{Binding WindowClosingCommand}" PassEventArgsToCommand="True"/>
        </EventTriggerBehavior>
        <EventTriggerBehavior EventName="KeyDown" SourceObject="Window">
            <InvokeCommandAction Command="{Binding KeyDownCommand}" PassEventArgsToCommand="True"/>
        </EventTriggerBehavior>
        <EventTriggerBehavior EventName="KeyUp" SourceObject="Window">
            <InvokeCommandAction Command="{Binding KeyUpCommand}" PassEventArgsToCommand="True"/>
        </EventTriggerBehavior>
    </i:Interaction.Behaviors>

    <Window.Resources>
        <converters:ValueInequalityConverter x:Key="ValueInequalityConverter"/>
    </Window.Resources>

    <Window.Styles>
        <Style Selector="MenuItem">
            <Setter Property="Padding" Value="10 8 10 8"/>
        </Style>
    </Window.Styles>

    <DockPanel>
        <controls:MainMenu
            DockPanel.Dock="Top"
            IsVisible="{Binding $parent[Window].WindowState, Converter={StaticResource ValueInequalityConverter}, ConverterParameter={x:Static WindowState.FullScreen}}"/>

        <Grid ColumnDefinitions="40,*,40"
            RowDefinitions="*,Auto"
            Focusable="True"
            FocusAdorner="{x:Null}">

            <controls:MainToolbar
                Grid.Row="0"
                Grid.Column="0"
                DockPanel.Dock="Top"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                Margin="6 10 0 0"
                DataContext="{Binding}"
                Width="30"/>

            <Border
                Grid.Row="0"
                Grid.Column="1">
                <Grid>
                    <Border CornerRadius="15" HorizontalAlignment="Center" ClipToBounds="True">
                        <Grid>
                            <Image x:Name="ScreenImage" Source="{Binding SpectrumScreen}" Stretch="Uniform" Classes.IsPaused="{Binding IsPaused}">
                                <Image.Styles>
                                    <Style Selector="Image.IsPaused">
                                        <Setter Property="Effect">
                                            <BlurEffect Radius="7"/>
                                        </Setter>
                                    </Style>
                                </Image.Styles>
                            </Image>
                        </Grid>
                    </Border>

                    <Border Background="{DynamicResource ButtonBackground}" Opacity=".25" Padding="20" CornerRadius="10" IsVisible="{Binding IsPaused}" HorizontalAlignment="Center" VerticalAlignment="Center">
                        <controls:PauseOverlay FontSize="100" Opacity="4" IsVisible="{Binding IsPaused}" VerticalAlignment="Center"/>
                    </Border>

                    <controls:TimeMachineTimer IsVisible="{Binding IsTimeMachineCountdownVisible}" ElapsedCommand="{Binding TimeMachineResumeEmulatorCommand}"/>
                </Grid>
            </Border>

            <controls:StatusBar
                Grid.Row="1"
                Grid.Column="0"
                Grid.ColumnSpan="3"
                Height="30"
                DataContext="{Binding StatusBarViewModel}"
                IsVisible="{Binding $parent[Window].WindowState, Converter={StaticResource ValueInequalityConverter}, ConverterParameter={x:Static WindowState.FullScreen}}"/>

            <WindowNotificationManager
                Grid.Row="0"
                Grid.Column="0"
                Grid.ColumnSpan="3"
                Name="NotificationManager"
                Position="BottomRight"/>
        </Grid>
    </DockPanel>
</Window>